#include <bits/stdc++.h>
using namespace std;

int permChoiceOne[] = {
   57, 49, 41, 33, 25, 17, 9 ,
   1 , 58, 50, 42, 34, 26, 18,
   10, 2 , 59, 51, 43, 35, 27,
   19, 11, 3 , 60, 52, 44, 36,
   63, 55, 47, 39, 31, 23, 15,
   7 , 62, 54, 46, 38, 30, 22,
   14, 6 , 61, 53, 45, 37, 29,
   21, 13, 5 , 28, 20, 12, 4 };

int permChoiceTwo[] = {
   14, 17, 11, 24, 1 , 5 , 3 , 28,
   15, 6 , 21, 10, 23, 19, 12, 4 ,
   26, 8 , 16, 7 , 27, 20, 13, 2 ,
   41, 52, 31, 37, 47, 55, 30, 40,
   51, 45, 33, 48, 44, 49, 39, 56,
   34, 53, 46, 42, 50, 36, 29, 32 };

int leftShiftTable[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

string rotateSubKey(string s , int rot) 
{
    return s.substr(rot, s.length()-rot) + s.substr(0, rot) ;
}

string firstPermute(string input)
{
    string res = "" ;
    for(int i=0 ; i<56 ; i++)
    {
        res += input[permChoiceOne[i]-1];
    }
    return res ;
}

string secondPermute(string input)
{
    string res = "" ;
    for(int i=0 ; i<48 ; i++)
    {
        res += input[permChoiceTwo[i]-1];
    }
    return res ;
}

void genKeys(string left, string right)
{
    ofstream fout ;
    fout.open("keygen.txt"); 

    for (int i=0; i<16; i++)
    {
        left  = rotateSubKey(left , leftShiftTable[i]);
        right = rotateSubKey(right, leftShiftTable[i]);

        string key = secondPermute(left+right);
        
        cout << "key " << i+1 << " \t: " << key << endl; 
        fout << key << endl; 
    }
}

int main()
{
    unsigned long long hexkey;
    cout << "\nEnter 64-bit key in hexadecimal(16-digits) : " ;
    cin >> hex >> hexkey; 

    string key = bitset<64>(hexkey).to_string(); 
    cout << "Binary key (k) \t: " << key << endl;

    key = firstPermute(key) ;
    cout <<  "PC-1 key (k+) \t: " << key << endl;

    cout << "\nSubKeys: " << endl;
    genKeys(key.substr(0,28) , key.substr(28,28));

    cout<<endl<<endl ;
}
/*000110110000001011101111111111000111100101110010
011110011010111011011001110111111100100111100101
010101011111110010001010110000101100111111011001
011100101010110111010110110110111011011100011101
011111001110110000000111111110110101011110101000
011000111010010100111110010110000111101100101111
111011001000010010110111111101100111100010111100
111101111000101000111010111000010011101111111011
111000001101101111101011111011111110011110010001
101100011111001101000111101110110100011101001111
001000010101111111010011110111101101001110000110
011101010111000111110101110101000110011111101101
100101111100010111010001111110101011101011001001
010111110100001110110111111100101111011100111011
101111111001000110001101001111110011111100101010
110010110011110110001011000011100101011111110111*/
